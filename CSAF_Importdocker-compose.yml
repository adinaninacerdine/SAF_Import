version: '3.8'

services:
  # Backend Node.js
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: saf-import-backend
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      - DB_SERVER=${DB_SERVER}
      - DB_NAME=${DB_NAME}
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - PORT=3001
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=http://localhost
      - NODE_ENV=production
    volumes:
      - uploads:/app/uploads
      - logs:/app/logs
    networks:
      - saf-network
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3001/api/health', (r) => {process.exit(r.statusCode === 200 ? 0 : 1)})"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    depends_on:
      - sqlserver

  # Frontend React + Nginx
  frontend:
    build:
      context: ./Frontend
      dockerfile: Dockerfile
      args:
        - REACT_APP_API_URL=http://localhost:3001/api
    container_name: saf-import-frontend
    restart: unless-stopped
    ports:
      - "80:80"
    networks:
      - saf-network
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 5s
    depends_on:
      - backend

  # SQL Server (optionnel - seulement pour d√©veloppement)
  # En production, utilisez un SQL Server externe
  sqlserver:
    image: mcr.microsoft.com/mssql/server:2019-latest
    container_name: saf-import-sqlserver
    restart: unless-stopped
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=${DB_PASSWORD}
      - MSSQL_PID=Express
    ports:
      - "1433:1433"
    volumes:
      - sqldata:/var/opt/mssql
    networks:
      - saf-network
    healthcheck:
      test: ["CMD-SHELL", "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P ${DB_PASSWORD} -Q 'SELECT 1' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

networks:
  saf-network:
    driver: bridge

volumes:
  uploads:
    driver: local
  logs:
    driver: local
  sqldata:
    driver: local
